/*
 * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

/* Generated By:JavaCC: Do not edit this line. ELParserTreeConstants.java Version 5.0 */
package com.sun.el.parser;

public interface ELParserTreeConstants {
    int JJTCOMPOSITEEXPRESSION = 0;
    int JJTLITERALEXPRESSION = 1;
    int JJTDEFERREDEXPRESSION = 2;
    int JJTDYNAMICEXPRESSION = 3;
    int JJTVOID = 4;
    int JJTSEMICOLON = 5;
    int JJTASSIGN = 6;
    int JJTLAMBDAEXPRESSION = 7;
    int JJTLAMBDAPARAMETERS = 8;
    int JJTCHOICE = 9;
    int JJTOR = 10;
    int JJTAND = 11;
    int JJTEQUAL = 12;
    int JJTNOTEQUAL = 13;
    int JJTLESSTHAN = 14;
    int JJTGREATERTHAN = 15;
    int JJTLESSTHANEQUAL = 16;
    int JJTGREATERTHANEQUAL = 17;
    int JJTCONCAT = 18;
    int JJTPLUS = 19;
    int JJTMINUS = 20;
    int JJTMULT = 21;
    int JJTDIV = 22;
    int JJTMOD = 23;
    int JJTNEGATIVE = 24;
    int JJTNOT = 25;
    int JJTEMPTY = 26;
    int JJTVALUE = 27;
    int JJTDOTSUFFIX = 28;
    int JJTBRACKETSUFFIX = 29;
    int JJTMETHODARGUMENTS = 30;
    int JJTMAPDATA = 31;
    int JJTMAPENTRY = 32;
    int JJTLISTDATA = 33;
    int JJTIDENTIFIER = 34;
    int JJTFUNCTION = 35;
    int JJTTRUE = 36;
    int JJTFALSE = 37;
    int JJTFLOATINGPOINT = 38;
    int JJTINTEGER = 39;
    int JJTSTRING = 40;
    int JJTNULL = 41;

    String[] jjtNodeName = { "CompositeExpression", "LiteralExpression", "DeferredExpression", "DynamicExpression", "void", "SemiColon", "Assign",
            "LambdaExpression", "LambdaParameters", "Choice", "Or", "And", "Equal", "NotEqual", "LessThan", "GreaterThan", "LessThanEqual", "GreaterThanEqual",
            "Concat", "Plus", "Minus", "Mult", "Div", "Mod", "Negative", "Not", "Empty", "Value", "DotSuffix", "BracketSuffix", "MethodArguments", "MapData",
            "MapEntry", "ListData", "Identifier", "Function", "True", "False", "FloatingPoint", "Integer", "String", "Null", };
}
/* JavaCC - OriginalChecksum=295bae338407e43a1d349f1ce802614a (do not edit this line) */
