buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
        classpath 'org.hibernate.build.gradle:gradle-animalSniffer-plugin:1.0.1.Final'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'osgi'

apply plugin: 'version-injection'

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'

apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'org.hibernate.common'
version = '6.0.0-SNAPSHOT'

buildDir = "target"

ext.javaLanguageLevel = '1.8'
targetCompatibility = project.javaLanguageLevel
sourceCompatibility = project.javaLanguageLevel

configurations {
    jbossLoggingTool {
        description = 'Configuration for defining dependencies needed to run the JBoss Logging AnnotationProcessor tool'
    }
}

dependencies {
    compile 'org.jboss.logging:jboss-logging:3.3.2.Final'

    jbossLoggingTool 'org.jboss.logging:jboss-logging-annotations:2.1.0.Final'
    jbossLoggingTool 'org.jboss.logging:jboss-logging-processor:2.1.0.Final'

    testCompile( 'junit:junit:3.8.1' )
}

// create a special 'compile' task that performs all the tasks normally associated with compiling a project
// via task dependencies
task compile
compile.dependsOn compileJava, processResources, compileTestJava, processTestResources


project.getConvention().findPlugin( JavaPluginConvention.class ).sourceSets.each { sourceSet ->
    JavaCompile javaCompileTask = project.tasks.findByName( sourceSet.compileJavaTaskName ) as JavaCompile

    File aptDir = project.file( "${project.buildDir}/generated-src/apt/${sourceSet.name}" )
    sourceSet.allJava.srcDir( aptDir )
    sourceSet.compileClasspath += configurations.jbossLoggingTool

    javaCompileTask.options.compilerArgs += [
            "-nowarn",
            "-encoding", "UTF-8",
            "-s", "${aptDir.absolutePath}"
    ]

    javaCompileTask.doFirst {
        aptDir.mkdirs()
    }
}


// Project version injection ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
versionInjection {
    into( 'org.hibernate.annotations.common.Version', 'getVersionString' )
}

jar {
    manifest = osgiManifest { manifest ->
        mainAttributes(
                'Main-Class': 'org.hibernate.annotations.common.Version'
        )
        // See https://discuss.gradle.org/t/balancing-deprecation-of-sourcesetoutput-classesdir-and-other-parts-of-gradle-that-only-accept-a-dir-file/25283
        classesDir = sourceSets.main.output.classesDir
        classpath = configurations.runtime

        instruction 'Bundle-Vendor', 'Hibernate.org'

        // Java 9 module name
        instruction 'Automatic-Module-Name', 'org.hibernate.commons.annotations'

        OsgiManifestPackagingInfo.buildInfo( project ).applyTo( manifest )

        instruction 'Implementation-Url', 'http://hibernate.org'
        instruction 'Implementation-Version', version
        instruction 'Implementation-Vendor', 'Hibernate.org'
        instruction 'Implementation-Vendor-Id', 'org.hibernate'
    }
}

// publishing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            pom {
                name = 'Hibernate Commons Annotations'
                description = 'Common reflection code used in support of annotation processing'
                url = 'http://hibernate.org'

                organization {
                    name = 'Hibernate.org'
                    url = 'http://hibernate.org'
                }

                licenses {
                    license {
                        name = 'GNU Library General Public License v2.1 or later'
                        url = 'http://www.opensource.org/licenses/LGPL-2.1'
                        comments = 'See discussion at http://hibernate.org/community/license/ for more details.'
                        distribution = 'repo'
                    }
                }

                scm {
                    url = 'http://github.com/hibernate/hibernate-commons-annotations'
                    connection = 'scm:git:http://github.com/hibernate/hibernate-commons-annotations.git'
                    developerConnection = 'scm:git:git@github.com:hibernate/hibernate-commons-annotations.git'
                }

                issueManagement {
                    system = 'jira'
                    url = 'https://hibernate.atlassian.net/browse/HCANN'
                }

                developers {
                    developer {
                        id = 'hibernate-team'
                        name = 'The Hibernate Development Team'
                        organization = 'Hibernate.org'
                        organizationUrl = 'http://hibernate.org'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if ( version.endsWith( 'SNAPSHOT' ) ) {
                name 'jboss-snapshots-repository'
                url 'https://repository.jboss.org/nexus/content/repositories/snapshots'
            }
            else {
                name 'jboss-releases-repository'
                url 'https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/'
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


// OSGi manifest helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class OsgiManifestPackagingInfo {
    private String[] exportPackageInstructions;
    private String[] privatePackageInstructions;

    String[] getExportPackageInstructions() {
        return exportPackageInstructions
    }

    String[] getPrivatePackageInstructions() {
        return privatePackageInstructions
    }

    public static OsgiManifestPackagingInfo buildInfo(Project project) {
        final String exportPackageVersion = project.version.replaceAll( "-SNAPSHOT", "" )
                .replaceAll( ".Final-redhat-", "DO_NOT_REPLACE" )
                .replaceAll( ".Final", "" )
                .replaceAll( "DO_NOT_REPLACE", ".Final-redhat-" );

        final Set<String> exportPackageInstructionSet = new HashSet<String>()
        final Set<String> privatePackageInstructionSet = new HashSet<String>()

        final SourceDirectorySet sourceDirectorySet = project.sourceSets.main.java;
        sourceDirectorySet.each { javaSrcFile ->
            final String packageName = determinePackageName( sourceDirectorySet, javaSrcFile );
            if ( packageName.endsWith( ".internal" )
                    || packageName.contains( ".internal." ) ) {
                privatePackageInstructionSet.add( packageName );
            }
            else {
                exportPackageInstructionSet.add( packageName + ";version=\"" + exportPackageVersion + "\"" );
            }
        }

        return new OsgiManifestPackagingInfo(
                exportPackageInstructionSet.toArray( new String[ exportPackageInstructionSet.size() ] ),
                privatePackageInstructionSet.toArray( new String[ privatePackageInstructionSet.size() ] )
        );
    }

    private static String determinePackageName(SourceDirectorySet sourceDirectorySet, File javaFile) {
        final javaFileAbsolutePath = javaFile.absolutePath;
        for ( File sourceDirectory : sourceDirectorySet.srcDirs ) {
            final String sourceDirectoryAbsolutePath = sourceDirectory.absolutePath;
            if ( javaFileAbsolutePath.startsWith( sourceDirectoryAbsolutePath ) ) {
                final String javaFileRelativePath = javaFileAbsolutePath.substring(
                        sourceDirectoryAbsolutePath.length() + 1,
                        javaFileAbsolutePath.lastIndexOf( File.separator )
                );
                return javaFileRelativePath.replace( File.separator, "." );
            }
        }
        throw new RuntimeException( "ugh" );
    }

    private OsgiManifestPackagingInfo(String[] exportPackageInstructions, String[] privatePackageInstructions) {
        this.exportPackageInstructions = exportPackageInstructions
        this.privatePackageInstructions = privatePackageInstructions
    }

    def applyTo(def manifest) {
        if ( exportPackageInstructions.length > 0 ) {
            manifest.instruction 'Export-Package', exportPackageInstructions
        }
        if ( privatePackageInstructions.length > 0 ) {
            manifest.instruction 'Private-Package', privatePackageInstructions
        }
    }
}
